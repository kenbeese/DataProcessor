#!/usr/bin/python
#encoding:utf-8

def optionArgs():
    from argparse import ArgumentParser
    desc = ""
    parser = ArgumentParser(description = desc)
    parser.add_argument("command", metavar = "COMMAND", type=str, nargs="*",
                        help="Usage: COMMAND [runame] [tag|comment]")
    parser.add_argument("-c", "--conffile", default = "runs.conf",
                  help = "specify conf file path. Default is runs.conf.")
    parser.add_argument("-m", "--metafile", default = "project.xml",
                  help = "specify meta file path. Default is project.xml.")
    parser.add_argument("-v", "--verbose", action = "store_true",
                        help = "Show Verbose help")
    args = parser.parse_args()
    return args



def main ():
    import os.path

    args = optionArgs()

    fl = setFunc(os.path.abspath(args.metafile))
    if args.verbose:
        help_message(fl)
        return
    if len(args.command) == 0:
        raise Warning("too few arguments")


    arg = args.command[1:]
    return fl.call(str(args.command[0]), *arg)



def help_message(fl):
    print "*******************"
    print "***Function List***"
    print "*******************"
    print ""
    for funcname in fl.names():
        print fl.help(funcname)
        print ""



def setFunc(metafile):
    import DataProcessor.pipes.InfoManager as Info
    import lib.afunc as afunc
    meta = Info.InfoManager(metafile)

    def lstag():
        for tag in meta.taglist():
            if tag != None:
                print tag
    def lsrun():
        for run in meta.runnamelist():
            if run != None:
                print run

    def setComment(runname, comment):
        meta.setComment(runname, comment)
        meta.saveInfo()

    def setTag(runname, tag):
        meta.setTag(runname, tag)
        meta.saveInfo()


    def rmTag(runname, tag):
        meta.rmTag(runname, tag)
        meta.saveInfo()

    def addRun(runname):
        meta.addRun(runname)
        meta.saveInfo()



    funcList = {
        "lstag"     :{"act": lstag,
                      "args": [],
                      "desc": "list of tags"},
        "lsrun"     :{"act": lsrun,
                      "args": [],
                      "desc": "list of runs"},
        "info"      :{"act": meta.runInfo,
                      "args": ["runname"],
                      "desc": "run info",
                      },
        "setc"      :{"act": setComment,
                      "args": ["runname", "comment"],
                      "desc": "set comment"},
        "settag"    :{"act": setTag,
                      "args": ["runname", "tagbody"],
                      "desc": "set tag"},
        "rmtag"     :{"act": rmTag,
                      "args": ["runname", "tagbody"],
                      "desc": "rm tag"},
        "tagged"    :{"act": meta.taggedlist,
                      "args": ["tag"],
                      "desc":"search tagged run"},
        "addRun"    :{"act": addRun,
                      "args": ["runname"],
                      "desc": "add new run"},
        "reflesh"   :{"act": meta.humanReadable,
                      "args":[],
                      "desc": "Update xml file for human readable"},
    }

    return afunc.func(funcList)





if __name__ == "__main__":
    main()
