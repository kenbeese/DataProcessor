#!/usr/bin/env python
# coding=utf-8

import os.path
import sys
import json
import traceback

sys.path = ([sys.path[0]]
            + [os.path.join(os.path.dirname(__file__), "../lib")]
            + sys.path[1:])
import dataprocessor as dp
sys.path = [sys.path[0]] + sys.path[2:]


def main(args):
    arguments = [vars(args)[i] for i, _ in args.val["args"]]
    if "kwds" in args.val:
        keywords = {i: vars(args)[i] for i, _ in args.val["kwds"]
                    if vars(args)[i]}
    else:
        keywords = {}

    if not args.input and not args.output:
        with dp.io.SyncDataHandler(args.json, silent=args.silent) as dh:
            node_list = args.val["func"](dh.get(), *arguments, **keywords)
            if args.replace:
                dh.replace(node_list, silent=args.silent)
            else:
                dh.update(node_list, silent=args.silent)
        return

    if args.input:
        with dp.io.SyncDataHandler(args.json, silent=args.silent) as dh:
            node_list = dh.get()
    else:
        node_list = dp.io.load([], args.json)
    node_list = args.val["func"](node_list, *arguments, **keywords)
    if args.output:
        json.dump(node_list, sys.stdout, indent=4)
    else:
        with dp.io.SyncDataHandler(args.json, silent=args.silent) as dh:
            if args.replace:
                dh.replace(node_list, silent=args.silent)
            else:
                dh.update(node_list, silent=args.silent)


if __name__ == '__main__':
    parser = dp.argparsers.dpmanip()
    args = parser.parse_args()
    try:
        main(args)
    except dp.exception.DataProcessorError as e:
        if args.debug:
            print(traceback.format_exc())
        print("=*= ERROR =*=")
        print("Message: %s" % e.msg)
        sys.exit(1)
