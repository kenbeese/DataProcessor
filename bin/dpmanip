#!/usr/bin/env python
# coding=utf-8
import argparse
import os.path
import sys
import traceback

sys.path = ([sys.path[0]]
            + [os.path.join(os.path.dirname(__file__), "../lib")]
            + sys.path[1:])
import dataprocessor as dp
sys.path = [sys.path[0]] + sys.path[2:]


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("-o", "--output", action="store_true",
                        help="filename of output JSON file")
    parser.add_argument("-s", "--silent", action="store_true",
                        help="Does not ask whether REPLACE JSON file")
    parser.add_argument("filename")
    sub_psr = parser.add_subparsers()

    for name, val in dp.pipes.pipes_dics.items():
        pipe_psr = sub_psr.add_parser(name, help=val["desc"])
        for arg in val["args"]:
            pipe_psr.add_argument(arg)
        pipe_psr.set_defaults(val=val)

    args = parser.parse_args()
    arguments = [vars(args)[i] for i in args.val["args"]]
    if not args.output:
        with dp.io.SyncDataHandler(args.filename, silent=args.silent) as dh:
            args.val["func"](dh.get(), *arguments)
        return
    else:
        node_list = dp.io.load([], args.filename)
        args.val["func"](node_list, *arguments)
        dp.io.save(node_list, args.output)

if __name__ == '__main__':
    try:
        main()
    except dp.exception.DataProcessorError as e:
        print(traceback.format_exc())
        print("ERROR in command-line arguments.")
        print("Message: %s" % e.msg)
        sys.exit(1)
