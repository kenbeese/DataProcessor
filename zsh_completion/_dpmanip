#compdef dpmanip
function _dpmanip-add_comment (){
    typeset -A opt_args
    local context state line

    _arguments -w -s -S \
        '(-h --help)'{-h,--help}'[show this help message and exit]' \
        '(-o)-o[filename of output JSON file]' \
        '*::arguments:_files'
}


function _dpmanip-filter_node_type (){
    typeset -A opt_args
    local context state line

    _arguments -w -s -S \
        '(-h --help)'{-h,--help}'[show this help message and exit]' \
        '(-o)-o[filename of output JSON file]' \
        '*::arguments:_files'
}


function _dpmanip-configure (){
    typeset -A opt_args
    local context state line

    _arguments -w -s -S \
        '(-h --help)'{-h,--help}'[show this help message and exit]' \
        '(-o)-o[filename of output JSON file]' \
        '(--section)--section' \
        '*::arguments:_files'
}


function _dpmanip-add_node (){
    typeset -A opt_args
    local context state line

    _arguments -w -s -S \
        '(-h --help)'{-h,--help}'[show this help message and exit]' \
        '(-o)-o[filename of output JSON file]' \
        '(--path)--path' \
        '(--node_type)--node_type' \
        '(--children)--children' \
        '(--name)--name' \
        '(--parents)--parents' \
        '*::arguments:_files'
}


function _dpmanip-configure_no_section (){
    typeset -A opt_args
    local context state line

    _arguments -w -s -S \
        '(-h --help)'{-h,--help}'[show this help message and exit]' \
        '(-o)-o[filename of output JSON file]' \
        '(--split_char)--split_char' \
        '(--comment_char)--comment_char' \
        '*::arguments:_files'
}


function _dpmanip-filter_project (){
    typeset -A opt_args
    local context state line

    _arguments -w -s -S \
        '(-h --help)'{-h,--help}'[show this help message and exit]' \
        '(-o)-o[filename of output JSON file]' \
        '*::arguments:_files'
}


function _dpmanip-load_json (){
    typeset -A opt_args
    local context state line

    _arguments -w -s -S \
        '(-h --help)'{-h,--help}'[show this help message and exit]' \
        '(-o)-o[filename of output JSON file]' \
        '*::arguments:_files'
}


function _dpmanip-register_figure (){
    typeset -A opt_args
    local context state line

    _arguments -w -s -S \
        '(-h --help)'{-h,--help}'[show this help message and exit]' \
        '(-o)-o[filename of output JSON file]' \
        '(--runs)--runs' \
        '(--generators)--generators' \
        '*::arguments:_files'
}


function _dpmanip-show_runs (){
    typeset -A opt_args
    local context state line

    _arguments -w -s -S \
        '(-h --help)'{-h,--help}'[show this help message and exit]' \
        '(-o)-o[filename of output JSON file]' \
        '(--project)--project' \
        '(--show_format)--show_format' \
        '*::arguments:_files'
}


function _dpmanip-save_json (){
    typeset -A opt_args
    local context state line

    _arguments -w -s -S \
        '(-h --help)'{-h,--help}'[show this help message and exit]' \
        '(-o)-o[filename of output JSON file]' \
        '(--silent)--silent' \
        '*::arguments:_files'
}


function _dpmanip-show_projects (){
    typeset -A opt_args
    local context state line

    _arguments -w -s -S \
        '(-h --help)'{-h,--help}'[show this help message and exit]' \
        '(-o)-o[filename of output JSON file]' \
        '(--show_format)--show_format' \
        '*::arguments:_files'
}


function _dpmanip-scan_directory (){
    typeset -A opt_args
    local context state line

    _arguments -w -s -S \
        '(-h --help)'{-h,--help}'[show this help message and exit]' \
        '(-o)-o[filename of output JSON file]' \
        '(--followlinks)--followlinks' \
        '*::arguments:_files'
}

function _subcmd_list() {
    local -a subcmd_list
    subcmd_list=(
        add_comment:'add comment to node with path'
        filter_node_type:'filter by node type'
        configure:'Read parameter file (use ConfigParser)'
        add_node:'Add node to node_list.'
        configure_no_section:'Read parameter file (without section)'
        filter_project:'filter by project path'
        load_json:'load node_list from a JSON file'
        register_figure:'add figure node into node_list'
        save_json:'save node_list in a JSON file'
        show_runs:'output runs path'
        show_projects:'output project name'
        scan_directory:'Scan nodes from all directories under the directory 'root'.'
    )
    _describe -t subcmd 'subcommand list' subcmd_list && return
}

function _dpmanip (){
    typeset -A opt_args
    local context state line

    integer int=1

    _arguments -w -s -S \
        '(-h --help)'{-h,--help}'[show this help message and exit]' \
        '(-s --silent)'{-s,--silent}'[Does not ask whether REPLACE JSON file]' \
        '(--debug)--debug[output traceback]' \
        ': :(add_comment filter_node_type configure add_node configure_no_section filter_project load_json register_figure show_runs save_json show_projects scan_directory)' \
        ':subcmd:->subcmd' \
        '*::subcmd-options-or-args:->subcmd-options-or-args'

    case $state in
        subcmd)
            _subcmd_list && ret=0
            ;;
        subcmd-options-or-args)
            local curcontext=$curcontext
            curcontext=${curcontext%:*:*}:dpmanip-$words[1]:
            if (( $+functions[_dpmanip-$words[1]] )); then
                _call_function ret _dpmanip-$words[1]
            else
                _files && ret=0
            fi
            ;;
    esac

    return ret
}
_dpmanip