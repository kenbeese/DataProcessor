#compdef dpmanip
function _dpmanip-add_node (){
    typeset -A opt_args
    local context state line

    _arguments -w -s -S \
        '(-h --help)'{-h,--help}'[show this help message and exit]' \
        '(--path)--path[path of new node]: :_files' \
        '(--name)--name[name of new node]: :_files' \
        '(--node_type)--node_type[type of new node]': :(run project figure ipynb)' \' \
        '(--children)--children[children paths of new node]: :_files' \
        '(--parents)--parents[paths parents of new node]: :_files' \
        '(--strategy)--strategy[strategy for resolving conflict]': :(raise update modest_update replace)' \' \
        '*::arguments:_files'
}


function _dpmanip-change_path (){
    typeset -A opt_args
    local context state line

    _arguments -w -s -S \
        '(-h --help)'{-h,--help}'[show this help message and exit]' \
        '*::arguments:_files'
}


function _dpmanip-filter_project (){
    typeset -A opt_args
    local context state line

    _arguments -w -s -S \
        '(-h --help)'{-h,--help}'[show this help message and exit]' \
        '*::arguments:_files'
}


function _dpmanip-add_tag (){
    typeset -A opt_args
    local context state line

    _arguments -w -s -S \
        '(-h --help)'{-h,--help}'[show this help message and exit]' \
        '*::arguments:_files'
}


function _dpmanip-save_json (){
    typeset -A opt_args
    local context state line

    _arguments -w -s -S \
        '(-h --help)'{-h,--help}'[show this help message and exit]' \
        '*::arguments:_files'
}


function _dpmanip-show_projects (){
    typeset -A opt_args
    local context state line

    _arguments -w -s -S \
        '(-h --help)'{-h,--help}'[show this help message and exit]' \
        '(--show_format)--show_format[show_format]: :_files' \
        '*::arguments:_files'
}


function _dpmanip-normalize (){
    typeset -A opt_args
    local context state line

    _arguments -w -s -S \
        '(-h --help)'{-h,--help}'[show this help message and exit]' \
        '*::arguments:_files'
}


function _dpmanip-gather_ipynb (){
    typeset -A opt_args
    local context state line

    _arguments -w -s -S \
        '(-h --help)'{-h,--help}'[show this help message and exit]' \
        '*::arguments:_files'
}


function _dpmanip-configure_no_section (){
    typeset -A opt_args
    local context state line

    _arguments -w -s -S \
        '(-h --help)'{-h,--help}'[show this help message and exit]' \
        '(--split_char)--split_char[separetor of parameters]: :_files' \
        '(--comment_char)--comment_char[charactors defines comment line]: :_files' \
        '*::arguments:_files'
}


function _dpmanip-load_json (){
    typeset -A opt_args
    local context state line

    _arguments -w -s -S \
        '(-h --help)'{-h,--help}'[show this help message and exit]' \
        '*::arguments:_files'
}


function _dpmanip-start_ipynb (){
    typeset -A opt_args
    local context state line

    _arguments -w -s -S \
        '(-h --help)'{-h,--help}'[show this help message and exit]' \
        '*::arguments:_files'
}


function _dpmanip-show_runs (){
    typeset -A opt_args
    local context state line

    _arguments -w -s -S \
        '(-h --help)'{-h,--help}'[show this help message and exit]' \
        '(--project)--project[project name]: :_files' \
        '(--show_format)--show_format[format]: :_files' \
        '(--parameters)--parameters[parameters to be displayed]: :_files:: :_files:: :_files:: :_files:: :_files:: :_files:: :_files:: :_files:: :_files:: :_files:: :_files' \
        '*::arguments:_files'
}


function _dpmanip-move_node (){
    typeset -A opt_args
    local context state line

    _arguments -w -s -S \
        '(-h --help)'{-h,--help}'[show this help message and exit]' \
        '*::arguments:_files'
}


function _dpmanip-filter_node_type (){
    typeset -A opt_args
    local context state line

    _arguments -w -s -S \
        '(-h --help)'{-h,--help}'[show this help message and exit]' \
        '*::arguments:_files'
}


function _dpmanip-merge_nodelist (){
    typeset -A opt_args
    local context state line

    _arguments -w -s -S \
        '(-h --help)'{-h,--help}'[show this help message and exit]' \
        '*::arguments:_files'
}


function _dpmanip-configure (){
    typeset -A opt_args
    local context state line

    _arguments -w -s -S \
        '(-h --help)'{-h,--help}'[show this help message and exit]' \
        '(--section)--section[section parameters are written]: :_files' \
        '(--filetype)--filetype[filetype \[ini, yaml\]. If not given, determined automatically by the filename extension.]: :_files' \
        '*::arguments:_files'
}


function _dpmanip-add_run (){
    typeset -A opt_args
    local context state line

    _arguments -w -s -S \
        '(-h --help)'{-h,--help}'[show this help message and exit]' \
        '(--tag)--tag[tag]: :_files' \
        '(--name)--name[name]: :_files' \
        '(--comment)--comment[comment]: :_files' \
        '*::arguments:_files'
}


function _dpmanip-add_comment (){
    typeset -A opt_args
    local context state line

    _arguments -w -s -S \
        '(-h --help)'{-h,--help}'[show this help message and exit]' \
        '*::arguments:_files'
}


function _dpmanip-untag (){
    typeset -A opt_args
    local context state line

    _arguments -w -s -S \
        '(-h --help)'{-h,--help}'[show this help message and exit]' \
        '*::arguments:_files'
}


function _dpmanip-add_ipynb (){
    typeset -A opt_args
    local context state line

    _arguments -w -s -S \
        '(-h --help)'{-h,--help}'[show this help message and exit]' \
        '(--parents)--parents[parents of new ipynb]: :_files:: :_files:: :_files:: :_files:: :_files:: :_files:: :_files:: :_files:: :_files:: :_files:: :_files' \
        '*::arguments:_files'
}


function _dpmanip-add_conf (){
    typeset -A opt_args
    local context state line

    _arguments -w -s -S \
        '(-h --help)'{-h,--help}'[show this help message and exit]' \
        '*::arguments:_files'
}


function _dpmanip-scan_directory (){
    typeset -A opt_args
    local context state line

    _arguments -w -s -S \
        '(-h --help)'{-h,--help}'[show this help message and exit]' \
        '(--followlinks)--followlinks[whether scan in symbolic link]: :_files' \
        '*::arguments:_files'
}


function _dpmanip-filter_prefix (){
    typeset -A opt_args
    local context state line

    _arguments -w -s -S \
        '(-h --help)'{-h,--help}'[show this help message and exit]' \
        '*::arguments:_files'
}

function _dpmanip_subcmd_list() {
    local -a subcmd_list
    subcmd_list=(
        add_node:'Add node to node_list.'
        change_path:'change path of node'
        filter_project:'filter by project path. This pipe filters out runs which don'\''t belong to the project, and should be used with '\''-o'\'' in dpmanip.'
        add_tag:'Add a tag into the node'
        save_json:'save node_list in a JSON file'
        show_projects:'output project name'
        normalize:'normalize nodes (i.e. fill necessary field)'
        gather_ipynb:'gather ipynb files'
        configure_no_section:'Read parameter file (without section)'
        load_json:'load node_list from a JSON file'
        start_ipynb:'start .ipynb in standing notebook'
        show_runs:'output runs path'
        move_node:'move node whose directory is also moved like as UNIX mv'
        filter_node_type:'filter by node type. This pipe filters out nodes which has different type attribute, and should be used with '\''-o'\'' option in dpmanip.'
        merge_nodelist:'Merge another node_list'
        configure:'Read parameter file (use ConfigParser)'
        add_run:'Add run.'
        add_comment:'add comment to node with path'
        untag:'remove a tag from specified path'
        add_ipynb:'register .ipynb file'
        add_conf:'Add a new configure to the path.'
        scan_directory:'Scan nodes from all directories under the directory '\''root'\''.'
        filter_prefix:'filter by prefix_path. This pipe filters out runs, projects and figures whose path does not start with the prefix, and should be used with '\''-o'\'' option in dpmanip.'
    )
    _describe -t subcmd 'subcommand list' subcmd_list && return
}

function _dpmanip (){
    typeset -A opt_args
    local context state line

    integer int=1

    _arguments -w -s -S \
        '(-h --help)'{-h,--help}'[show this help message and exit]' \
        '(--json)--json[path of JSON file]: :_files' \
        '(--debug)--debug[output traceback nad debug message]' \
        '(-v --verbose)'{-v,--verbose}'[output INFO log]' \
        '(-i --input)'{-i,--input}'[Use stdin as data JSON]' \
        '(-o --output)'{-o,--output}'[Output result node_list]' \
        '(-r --replace)'{-r,--replace}'[Use replace strategy for saving JSON]' \
        ':subcmd:->subcmd' \
        '*::subcmd-options-or-args:->subcmd-options-or-args'

    case $state in
        subcmd)
            _dpmanip_subcmd_list && ret=0
            ;;
        subcmd-options-or-args)
            local curcontext=$curcontext
            curcontext=${curcontext%:*:*}:dpmanip-$words[1]:
            if (( $+functions[_dpmanip-$words[1]] )); then
                _call_function ret _dpmanip-$words[1]
            else
                _files && ret=0
            fi
            ;;
    esac

    return ret
}
_dpmanip