#compdef dpmanip
function _dpmanip-add_node (){
    typeset -A opt_args
    local context state line

    _arguments -w -s -S \
        '(-h --help)'{-h,--help}'[show this help message and exit]' \
        '(--path)--path[path]' \
        '(--node_type)--node_type[node_type]' \
        '(--children)--children[children]' \
        '(--name)--name[name]' \
        '(--parents)--parents[parents]' \
        '*::arguments:_files'
}


function _dpmanip-change_name (){
    typeset -A opt_args
    local context state line

    _arguments -w -s -S \
        '(-h --help)'{-h,--help}'[show this help message and exit]' \
        '*::arguments:_files'
}


function _dpmanip-filter_project (){
    typeset -A opt_args
    local context state line

    _arguments -w -s -S \
        '(-h --help)'{-h,--help}'[show this help message and exit]' \
        '*::arguments:_files'
}


function _dpmanip-add_tag (){
    typeset -A opt_args
    local context state line

    _arguments -w -s -S \
        '(-h --help)'{-h,--help}'[show this help message and exit]' \
        '*::arguments:_files'
}


function _dpmanip-save_json (){
    typeset -A opt_args
    local context state line

    _arguments -w -s -S \
        '(-h --help)'{-h,--help}'[show this help message and exit]' \
        '(--silent)--silent[silent]' \
        '*::arguments:_files'
}


function _dpmanip-show_projects (){
    typeset -A opt_args
    local context state line

    _arguments -w -s -S \
        '(-h --help)'{-h,--help}'[show this help message and exit]' \
        '(--show_format)--show_format[show_format]' \
        '*::arguments:_files'
}


function _dpmanip-add_comment (){
    typeset -A opt_args
    local context state line

    _arguments -w -s -S \
        '(-h --help)'{-h,--help}'[show this help message and exit]' \
        '*::arguments:_files'
}


function _dpmanip-configure_no_section (){
    typeset -A opt_args
    local context state line

    _arguments -w -s -S \
        '(-h --help)'{-h,--help}'[show this help message and exit]' \
        '(--split_char)--split_char[split_char]' \
        '(--comment_char)--comment_char[comment_char]' \
        '*::arguments:_files'
}


function _dpmanip-load_json (){
    typeset -A opt_args
    local context state line

    _arguments -w -s -S \
        '(-h --help)'{-h,--help}'[show this help message and exit]' \
        '*::arguments:_files'
}


function _dpmanip-register_figure (){
    typeset -A opt_args
    local context state line

    _arguments -w -s -S \
        '(-h --help)'{-h,--help}'[show this help message and exit]' \
        '(--runs)--runs[runs]' \
        '(--generators)--generators[generators]' \
        '*::arguments:_files'
}


function _dpmanip-change_path (){
    typeset -A opt_args
    local context state line

    _arguments -w -s -S \
        '(-h --help)'{-h,--help}'[show this help message and exit]' \
        '(--silent)--silent[silent]' \
        '*::arguments:_files'
}


function _dpmanip-show_runs (){
    typeset -A opt_args
    local context state line

    _arguments -w -s -S \
        '(-h --help)'{-h,--help}'[show this help message and exit]' \
        '(--project)--project[project name]' \
        '(--show_format)--show_format[format]' \
        '(--parameters)--parameters[parameters to be displayed]:: :_files:: :_files:: :_files:: :_files:: :_files:: :_files:: :_files:: :_files:: :_files:: :_files' \
        '*::arguments:_files'
}


function _dpmanip-filter_prefix (){
    typeset -A opt_args
    local context state line

    _arguments -w -s -S \
        '(-h --help)'{-h,--help}'[show this help message and exit]' \
        '*::arguments:_files'
}


function _dpmanip-filter_node_type (){
    typeset -A opt_args
    local context state line

    _arguments -w -s -S \
        '(-h --help)'{-h,--help}'[show this help message and exit]' \
        '*::arguments:_files'
}


function _dpmanip-normalize (){
    typeset -A opt_args
    local context state line

    _arguments -w -s -S \
        '(-h --help)'{-h,--help}'[show this help message and exit]' \
        '*::arguments:_files'
}


function _dpmanip-configure (){
    typeset -A opt_args
    local context state line

    _arguments -w -s -S \
        '(-h --help)'{-h,--help}'[show this help message and exit]' \
        '(--section)--section[section]' \
        '*::arguments:_files'
}


function _dpmanip-add_run (){
    typeset -A opt_args
    local context state line

    _arguments -w -s -S \
        '(-h --help)'{-h,--help}'[show this help message and exit]' \
        '(--tag)--tag[tag]' \
        '(--name)--name[name]' \
        '(--comment)--comment[comment]' \
        '*::arguments:_files'
}


function _dpmanip-untag (){
    typeset -A opt_args
    local context state line

    _arguments -w -s -S \
        '(-h --help)'{-h,--help}'[show this help message and exit]' \
        '*::arguments:_files'
}


function _dpmanip-add_conf (){
    typeset -A opt_args
    local context state line

    _arguments -w -s -S \
        '(-h --help)'{-h,--help}'[show this help message and exit]' \
        '*::arguments:_files'
}


function _dpmanip-remove_node (){
    typeset -A opt_args
    local context state line

    _arguments -w -s -S \
        '(-h --help)'{-h,--help}'[show this help message and exit]' \
        '*::arguments:_files'
}


function _dpmanip-scan_directory (){
    typeset -A opt_args
    local context state line

    _arguments -w -s -S \
        '(-h --help)'{-h,--help}'[show this help message and exit]' \
        '(--followlinks)--followlinks[followlinks]' \
        '*::arguments:_files'
}


function _dpmanip-move_node (){
    typeset -A opt_args
    local context state line

    _arguments -w -s -S \
        '(-h --help)'{-h,--help}'[show this help message and exit]' \
        '*::arguments:_files'
}

function _dpmanip_subcmd_list() {
    local -a subcmd_list
    subcmd_list=(
        add_node:'Add node to node_list.'
        change_name:'Change name.'
        filter_project:'filter by project path.
        This pipe filters out database.
        In \`dpmanip\`, std output option '-o' should be used.
        '
        add_tag:'Add a tag into the node'
        save_json:'save node_list in a JSON file'
        show_projects:'output project name'
        add_comment:'add comment to node with path'
        configure_no_section:'Read parameter file (without section)'
        load_json:'load node_list from a JSON file'
        register_figure:'add figure node into node_list'
        change_path:'change path of node'
        show_runs:'output runs path'
        move_node:'move node whose directory is also moved like as UNIX mv'
        filter_node_type:'filter by node type.
        This pipe filters out database.
        In \`dpmanip\`, std output option '-o' should be used.
        '
        normalize:'normalize nodes (i.e. fill necessary field)'
        configure:'Read parameter file (use ConfigParser)'
        add_run:'Add run.'
        untag:'remove a tag from specified path'
        add_conf:'Add a new configure to the path.'
        remove_node:'Remove the information of run or project from the database of this tool.
        Dose not remove the directory of run or project.'
        scan_directory:'Scan nodes from all directories under the directory 'root'.'
        filter_prefix:'filter by prefix_path.
        This pipe filters out database.
        In \`dpmanip\`, std output option '-o' should be used.
        '
    )
    _describe -t subcmd 'subcommand list' subcmd_list && return
}

function _dpmanip (){
    typeset -A opt_args
    local context state line

    integer int=1

    _arguments -w -s -S \
        '(-h --help)'{-h,--help}'[show this help message and exit]' \
        '(--json)--json[path of JSON file]' \
        '(--debug)--debug[output traceback]' \
        '(-s --silent)'{-s,--silent}'[Does not ask whether REPLACE JSON file]' \
        '(-i --input)'{-i,--input}'[Use stdin as data JSON]' \
        '(-o --output)'{-o,--output}'[Output result node_list]' \
        '(-r --replace)'{-r,--replace}'[Use replace strategy for saving JSON]' \
        ':subcmd:->subcmd' \
        '*::subcmd-options-or-args:->subcmd-options-or-args'

    case $state in
        subcmd)
            _dpmanip_subcmd_list && ret=0
            ;;
        subcmd-options-or-args)
            local curcontext=$curcontext
            curcontext=${curcontext%:*:*}:dpmanip-$words[1]:
            if (( $+functions[_dpmanip-$words[1]] )); then
                _call_function ret _dpmanip-$words[1]
            else
                _files && ret=0
            fi
            ;;
    esac

    return ret
}
_dpmanip